// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String  @unique
  password String
  avatar String?
  player Player?
  playerId  String? @db.Uuid 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isOnline Boolean @default(false)
  lastTimeOnline DateTime @default(now())
}

model Player {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  lastname    String
  nickname    String
  owner       User    @relation(fields: [ownerId], references: [id])
  ownerId     String  @db.Uuid @unique
  
  // Player stats
  doubles     Int @default(1)
  scoring     Int @default(1)
  mentality   Int @default(1)
  charisma    Int @default(1)
  consistency Int @default(1)
  pressure_handling Int @default(1)

  // Training sessions
  trainingSessions TrainingSession[]
}

model TrainingSession {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player      Player  @relation(fields: [playerId], references: [id])
  playerId    String  @db.Uuid
  
  skillType   String  // "doubles", "scoring", etc.
  startTime   DateTime @default(now())
  duration    Int     // w sekundach
  isCompleted Boolean @default(false)
  isActive    Boolean @default(true) // czy sesja jest aktualnie aktywna
  
  // Opcjonalnie: wyniki treningu
  skillGained Int?    // ile punktów umiejętności zdobyto
  completedAt DateTime?
}